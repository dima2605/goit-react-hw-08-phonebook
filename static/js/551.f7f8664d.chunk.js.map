{"version":3,"file":"static/js/551.f7f8664d.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactListItem/ContactListItem.styled.js","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.data.contacts;\n\nexport const selectFilter = state => state.filter.letters;\n\nexport const selectError = state => state.data.error;\n\nexport const selectIsLoading = state => state.data.isLoading;\n\nexport const selectVisibleContacts = createSelector(\n  [selectFilter, selectContacts],\n  (filter, contacts) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  font-size: 18px;\n  margin-bottom: 14px;\n`;\n\nexport const Button = styled.button`\n  margin-left: 10px;\n  margin-bottom: 11px;\n  font-size: 16px;\n  border-radius: 3px;\n  border: 1px solid purple;\n  color: white;\n  background: purple;\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Button } from './ContactListItem.styled';\n\nexport const ContactListItem = ({ contact }) => {\n  const { name, number } = contact;\n  const dispatch = useDispatch();\n\n  const handleDelete = () => dispatch(deleteContact(contact.id));\n\n  return (\n    <>\n      {name} : {number}\n      <Button type=\"submit\" onClick={handleDelete}>\n        Delete\n      </Button>\n    </>\n  );\n};\n\nContactListItem.propTypes = {\n  contact: PropTypes.object.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin-left: 33vw;\n  padding-left: 0;\n`;\n","import PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectFilter,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors.js';\nimport { ContactListItem } from '../ContactListItem/ContactListItem.jsx';\nimport { List } from './ContactList.styled.js';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <List>\n      {filter\n        ? visibleContacts.map(contact => (\n            <li key={contact.id}>\n              <ContactListItem contact={contact} />\n            </li>\n          ))\n        : contacts.map(contact => (\n            <li key={contact.id}>\n              <ContactListItem contact={contact} />\n            </li>\n          ))}\n    </List>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  filter: PropTypes.string,\n};\n","import { Field, Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const ContainerForm = styled.div`\n  width: 320px;\n  padding: 15px;\n  outline: 1px solid black;\n`;\n\nexport const ContactForm = styled(Form)`\n  margin-left: 33vw;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Lable = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n  font-weight: bold;\n`;\n\nexport const Input = styled(Field)`\n  width: 200px;\n  margin-top: 5px;\n  border: 1px solid purple;\n  background-color: white;\n  &:focus {\n    border-color: blue;\n    background-color: white;\n  }\n`;\n\nexport const Button = styled.button`\n  width: fit-content;\n  font-size: 16px;\n  border-radius: 3px;\n  border: 1px solid purple;\n  color: white;\n  background: purple;\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { ContactForm, Lable, Button, Input } from './ContactForm.styled';\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.string().min(5).max(12).required(),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const Form = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const onSubmit = contact => {\n    dispatch(addContact(contact));\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    if (contacts.some(contact => contact.name === values.name)) {\n      alert(`${values.name} is already in contacts`);\n    } else {\n      onSubmit(values);\n    }\n\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <ContactForm>\n        <Lable>\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <ErrorMessage name=\"name\" />\n        </Lable>\n        <Lable>\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n          <ErrorMessage name=\"number\" />\n        </Lable>\n\n        <Button type=\"submit\">Add contact</Button>\n      </ContactForm>\n    </Formik>\n  );\n};\n\nForm.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-top: 35px;\n  margin-left: 33vw;\n  font-size: 18px;\n  font-weight: bold;\n`;\n\nexport const Input = styled.input`\n  width: 200px;\n  margin-top: 5px;\n  border: 1px solid purple;\n  &:focus {\n    border-color: blue;\n    background-color: white;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { Label, Input } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const changeHandleFilter = event => {\n    const { value } = event.currentTarget;\n\n    dispatch(changeFilter(value));\n  };\n\n  return (\n    <>\n      <Label>\n        Find contact by name\n        <Input type=\"text\" value={filter} onChange={changeHandleFilter} />\n      </Label>\n    </>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nexport const Text = styled.div`\n  margin-left: 33vw;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Form } from 'components/ContactForm/ContactForm';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { Filter } from 'components/Filter/Filter';\nimport { Text } from './Contacts.styled';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Form />\n      <Filter />\n      <Text>{isLoading && 'Request in progress...'}</Text>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["selectContacts","state","data","contacts","selectFilter","filter","letters","selectIsLoading","isLoading","selectVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","Button","styled","ContactListItem","number","dispatch","useDispatch","type","onClick","deleteContact","id","List","ContactList","useSelector","visibleContacts","map","ContactForm","Form","Lable","Input","Field","schema","yup","shape","required","min","max","initialValues","onSubmit","values","resetForm","some","alert","addContact","validationSchema","pattern","title","Label","Filter","value","onChange","event","currentTarget","changeFilter","Text","Contacts","useEffect","fetchContacts"],"sourceRoot":""}